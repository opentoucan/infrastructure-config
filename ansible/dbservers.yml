- hosts: postgres

  vars_files:
    - vars.yml

  vars:
    postgres_version: "17"
    cluster_name: main

  handlers:
    - name: Restart postgresql
      ansible.builtin.systemd:
        name: postgresql
        state: restarted

  tasks:
    # Install PostgreSQL on PostgreSQL-host
    - name: Add pgdg repo to sources.list.d
      ansible.builtin.lineinfile:
        path: /etc/apt/sources.list.d/pgdg.list
        line: "deb http://apt.postgresql.org/pub/repos/apt {{ ansible_distribution_release }}-pgdg main"
        create: true

    - name: Download PostgreSQL key and add it to system keyring
      ansible.builtin.apt_key:
        url: https://www.postgresql.org/media/keys/ACCC4CF8.asc
        state: present

    - name: Install PostgreSQL, psycopg2, and pgbackrest
      ansible.builtin.apt:
        name: postgresql-{{ postgres_version }},postgresql-client-17,postgresql-contrib,python3-psycopg2,pgbackrest
        state: present
        update_cache: true

    - name: Create the cluster
      ansible.builtin.command: pg_createcluster -u postgres {{ postgres_version }} {{ cluster_name }}
      register: create_cluster
      failed_when: "'Error: cluster configuration already exists' not in create_cluster.stderr"

    - name: Start and enable the service
      ansible.builtin.systemd:
        name: postgresql
        state: started
        enabled: true
    - name: Set options
      community.postgresql.postgresql_set:
        name: "{{ item.name }}"
        value: "{{ item.value }}"
      become: true
      become_user: postgres
      with_items: "{{ postgresql_options | default([]) }}"
      notify:
        - Restart postgresql

    - name: Create the databases
      community.postgresql.postgresql_db:
        name: "{{ item }}"
        encoding: "UTF-8"
      become: true
      become_user: postgres
      with_items: "{{ postgresql_databases }}"

    - name: Create the users
      community.postgresql.postgresql_user:
        db: "{{ item.db }}"
        name: "{{ item.name }}"
        password: "{{ item.password | default(omit) }}"
      become: true
      become_user: postgres
      environment:
        PGOPTIONS: "-c password_encryption=scram-sha-256"
      with_items: "{{ postgresql_users }}"

    - name: Create the schemas
      community.postgresql.postgresql_schema:
        db: "{{ item.db }}"
        name: "{{ item.name }}"
        owner: "{{ item.owner }}"
      become: true
      become_user: postgres
      with_items: "{{ postgresql_schemas }}"

    - name: Set the user privileges
      community.postgresql.postgresql_privs:
        database: "{{ item.db }}"
        state: present
        objs: "{{ item.objs | default(omit) }}"
        privs: "{{ item.privs }}"
        type: "{{ item.type | default(omit) }}"
        roles: "{{ item.roles | default(omit) }}"
      become: true
      become_user: postgres
      with_items: "{{ postgresql_privs | default([]) }}"

    - name: Add entries to pg_hba
      community.postgresql.postgresql_pg_hba:
        dest: "/var/lib/pgsql/data/pg_hba.conf"
        address: "{{ item.address | default(omit) }}"
        contype: "{{ item.contype }}"
        databases: "{{ item.databases }}"
        method: "{{ item.method }}"
        users: "{{ item.users }}"
      become: true
      become_user: postgres
      with_items: "{{ postgresql_hba_entries }}"
      notify:
        - Restart postgresql

    - name: Enable the HSTORE extension
      community.postgresql.postgresql_ext:
        name: "{{ item.name }}"
        db: "{{ item.db }}"
        state: present
      become: true
      become_user: postgres
      with_items: "{{ postgresql_extensions | default([]) }}"
      notify:
        - Restart postgresql
