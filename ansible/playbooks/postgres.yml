---
- hosts: postgres
  handlers:
    - import_tasks: ../handlers/main.yml
  tasks:
  - name: Task is running from within the role
    ansible.builtin.debug:
      msg: "This is a task from my_role."

  - name: Add pgdg repo to sources.list.d
    ansible.builtin.lineinfile:
      path: /etc/apt/sources.list.d/pgdg.list
      line: deb http://apt.postgresql.org/pub/repos/apt {{ ansible_distribution_release }}-pgdg
        main
      create: true

  - name: Download PostgreSQL key and add it to system keyring
    ansible.builtin.apt_key:
      url: https://www.postgresql.org/media/keys/ACCC4CF8.asc
      state: present

  - name: Install PostgreSQL, psycopg2
    ansible.builtin.apt:
      name: postgresql-{{ postgresql_version }},postgresql-client-{{ postgresql_version }},postgresql-contrib,python3-psycopg2
      state: present
      update_cache: true

  - name: Start and enable the service
    ansible.builtin.systemd:
      name: postgresql
      state: started
      enabled: true

  - name: Set options
    community.postgresql.postgresql_set:
      name: '{{ item.name }}'
      value: '{{ item.value }}'
    become: true
    become_user: postgres
    with_items: '{{ postgresql_options | default([]) }}'
    notify: [Restart postgresql]

  - name: Create the databases
    community.postgresql.postgresql_db:
      name: '{{ item }}'
      encoding: UTF-8
    become: true
    become_user: postgres
    with_items: '{{ postgresql_databases }}'

  - name: Create the users
    community.postgresql.postgresql_user:
      name: '{{ item.name }}'
      password: '{{ item.password | default(omit) }}'
    become: true
    become_user: postgres
    environment:
      PGOPTIONS: -c password_encryption=scram-sha-256
    with_items: '{{ postgresql_users }}'

  - name: Create the schemas
    community.postgresql.postgresql_schema:
      login_db: '{{ item.db }}'
      name: '{{ item.name }}'
      owner: '{{ item.owner }}'
    become: true
    become_user: postgres
    with_items: '{{ postgresql_schemas }}'

  - name: Set the user privileges
    community.postgresql.postgresql_privs:
      login_db: '{{ item.db }}'
      state: present
      objs: '{{ item.objs | default(omit) }}'
      privs: '{{ item.privs }}'
      type: '{{ item.type | default(omit) }}'
      roles: '{{ item.roles | default(omit) }}'
      schema: '{{ item.schema | default(omit) }}'
    become: true
    become_user: postgres
    with_items: '{{ postgresql_privs | default([]) }}'

  - name: Add entries to pg_hba
    community.postgresql.postgresql_pg_hba:
      dest: /etc/postgresql/{{ postgresql_version }}/main/pg_hba.conf
      address: '{{ item.address | default(omit) }}'
      contype: '{{ item.contype }}'
      databases: '{{ item.databases }}'
      method: '{{ item.method }}'
      users: '{{ item.users }}'
      create: true
    become: true
    become_user: postgres
    with_items: '{{ postgresql_hba_entries }}'
    notify: [Restart postgresql]

  - name: Enable the HSTORE extension
    community.postgresql.postgresql_ext:
      name: '{{ item.name }}'
      login_db: '{{ item.db }}'
      state: present
    become: true
    become_user: postgres
    with_items: '{{ postgresql_extensions | default([]) }}'
    notify: [Restart postgresql]

  - name: Ensure archive-async is not in pgbackrest_global_config
    fail:
      msg: Configure async archive with 'pgbackrest_async_archive' and remove it from
        'pgbackrest_global_config'
    when: "'archive-async' in pgbackrest_global_config"

  - name: Ensure spool-path is not in pgbackrest_global_config
    fail:
      msg: Configure spool path with 'pgbackrest_spool_path' and remove it from 'pgbackrest_global_config'
    when: "'spool-path' in pgbackrest_global_config"

  - name: Install pgbackrest
    ansible.builtin.apt:
      name: pgbackrest
      state: present
      update_cache: true

  - name: Ensure spool path exists
    file:
      path: '{{ pgbackrest_spool_path }}'
      state: directory
      owner: '{{ pgbackrest_owner }}'
      group: '{{ pgbackrest_owner }}'
      mode: 0700

  - name: Copy pgbackrest config
    template:
      src: ../templates/pgbackrest.conf.j2
      dest: /etc/pgbackrest.conf
      owner: '{{ pgbackrest_owner }}'
      group: '{{ pgbackrest_owner }}'
      mode: 0600
    notify: reconfigure pgbackrest

  - name: Remove old services
    file:
      path: /etc/systemd/system/pgbackrest-{{ name }}-{{ backup_type }}.service
      state: absent
    vars:
      name: '{{ item.0.name }}'
      backup_type: '{{ item.1.backup_type }}'
    loop: "{{ pgbackrest_stanzas | subelements('schedules', skip_missing=True) }}"
    loop_control:
      label: '{{ name }} [{{ backup_type }}]'
    notify: reload systemd

  - name: Remove old timers
    file:
      path: /etc/systemd/system/pgbackrest-{{ name }}-{{ backup_type }}.timer
      state: absent
    vars:
      name: '{{ item.0.name }}'
      backup_type: '{{ item.1.backup_type }}'
    loop: "{{ pgbackrest_stanzas | subelements('schedules', skip_missing=True) }}"
    loop_control:
      label: '{{ name }} [{{ backup_type }}]'
    notify: reload systemd

  - name: Configure services and timers
    include_tasks: ../tasks/configure-pgbackrest-services.yml
    loop: "{{ range(1, pgbackrest_repos | length + 1) | list }}"
    loop_control:
      loop_var: repo
    when: pgbackrest_services_install | bool
